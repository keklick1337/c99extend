#!/usr/bin/env sh
#
# by Vladislav Tislenko aka keklick1337 (2025)
# This script detects a suitable compiler (clang or gcc) and
# generates a Makefile for building:
#   - A single static library: libc99extend.a
#   - Tests: queue_test, string_utf8_test
# in strict C99 mode with maximum warnings.
#
# Usage:
#   ./configure [options]
#
# Options:
#   --exclude-tests <test1,test2,...>
#       Exclude specific tests from the build.
#
#   --help|-h
#       Show this help message and exit.
#
# Available tests for exclusion:
#   - queue_test
#   - string_utf8_test
#
# Example usage:
#   ./configure
#       -> Build the library and all tests.
#
#   ./configure --exclude-tests queue_test
#       -> Build the library and all tests except queue_test.
#
#   ./configure --exclude-tests queue_test,string_utf8_test
#       -> Build only the library (no tests).
#

echo "Running configure script..."

# ---------------------------------------------------------
# Parse command-line arguments
# ---------------------------------------------------------
EXCLUDE_TESTS_LIST=""

while [ $# -gt 0 ]; do
    case "$1" in
        --exclude-tests)
            EXCLUDE_TESTS_LIST="$2"
            shift 2
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo "  --exclude-tests <test1,test2,...>  Exclude specific tests from the build"
            echo "  --help                             Show this help and exit"
            echo ""
            echo "Available tests for exclusion: queue_test, string_utf8_test"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Try '$0 --help' for more information."
            exit 1
            ;;
    esac
done

# ---------------------------------------------------------
# Detect compiler (clang or gcc)
# ---------------------------------------------------------
if command -v clang >/dev/null 2>&1; then
    CC=clang
    echo "Detected clang as compiler."
elif command -v gcc >/dev/null 2>&1; then
    CC=gcc
    echo "Detected gcc as compiler."
else
    echo "ERROR: No suitable C compiler found (clang or gcc)."
    exit 1
fi

# ---------------------------------------------------------
# Strict C99 with maximum warnings
# ---------------------------------------------------------
CFLAGS="-Wall -Wextra -Werror -pedantic -std=c99 -O2"

# ---------------------------------------------------------
# Single library: libc99extend.a
# Object files: queue.o, string_utf8.o
# ---------------------------------------------------------
LIB_NAME="libc99extend.a"
LIB_OBJECTS="queue.o string_utf8.o"

# ---------------------------------------------------------
# Tests available
# ---------------------------------------------------------
ALL_TESTS="queue_test string_utf8_test"

# Convert comma-separated excludes into an array
IFS=',' read -r -a EXCLUDE_ARRAY <<< "$EXCLUDE_TESTS_LIST"

# We'll build only those tests that are not in the exclusion list
SHOULD_BUILD_TESTS=""
for T in $ALL_TESTS; do
    skip="false"
    for ex in "${EXCLUDE_ARRAY[@]}"; do
        if [ "$T" = "$ex" ]; then
            skip="true"
            break
        fi
    done
    if [ "$skip" = "false" ]; then
        SHOULD_BUILD_TESTS="$SHOULD_BUILD_TESTS $T"
    fi
done

# ---------------------------------------------------------
# Directories for source and tests (adjust if needed)
# ---------------------------------------------------------
SRC_DIR="./c99extend"
TESTS_DIR="./tests"

# ---------------------------------------------------------
# Generate Makefile
# ---------------------------------------------------------
cat << EOF > Makefile
# ---------------------------------------------------------
# Makefile generated by the configure script
# by Vladislav Tislenko aka keklick1337 (2025)
#
# This Makefile builds:
#   - libc99extend.a (from queue.o + string_utf8.o)
#   - Tests: queue_test, string_utf8_test (unless excluded)
# ---------------------------------------------------------

CC = $CC
CFLAGS = $CFLAGS

AR = ar
RANLIB = ranlib

LIB_NAME = $LIB_NAME
LIB_OBJECTS = $LIB_OBJECTS

TESTS = $SHOULD_BUILD_TESTS

SRC_DIR = $SRC_DIR
TESTS_DIR = $TESTS_DIR

.PHONY: all library tests clean run

# 'all' builds the library and all non-excluded tests
all: library tests

# Build the static library
library: \$(LIB_NAME)

\$(LIB_NAME): \$(LIB_OBJECTS)
	\$(AR) rcs \$@ \$^
	\$(RANLIB) \$@

# Compile object files
queue.o: \$(SRC_DIR)/queue.c \$(SRC_DIR)/queue.h
	\$(CC) \$(CFLAGS) -c \$< -o \$@

string_utf8.o: \$(SRC_DIR)/string_utf8.c \$(SRC_DIR)/string_utf8.h
	\$(CC) \$(CFLAGS) -c \$< -o \$@

tests:
ifneq (\$(strip \$(TESTS)),)
EOF

# Append commands for each test we want to build
for T in $SHOULD_BUILD_TESTS; do
    case "$T" in
        queue_test)
            # Build queue_test by linking with libc99extend.a
            echo "	\$(CC) \$(CFLAGS) -I\$(SRC_DIR) \$(TESTS_DIR)/queue_test.c \$(LIB_NAME) -o queue_test"
            ;;
        string_utf8_test)
            # Build string_utf8_test by linking with libc99extend.a
            echo "	\$(CC) \$(CFLAGS) -I\$(SRC_DIR) \$(TESTS_DIR)/string_utf8_test.c \$(LIB_NAME) -o string_utf8_test"
            ;;
    esac
done >> Makefile

# Close the ifneq block
cat << 'EOF' >> Makefile
else
	@echo "No tests to build (all tests are excluded)."
endif

run:
ifneq ($(strip $(TESTS)),)
	@echo "Running tests..."
	@if [ -f queue_test ]; then ./queue_test; else echo "queue_test not built or excluded."; fi
	@echo
	@if [ -f string_utf8_test ]; then ./string_utf8_test; else echo "string_utf8_test not built or excluded."; fi
else
	@echo "No tests to run (all tests are excluded)."
endif

clean:
	rm -f *.o *.a queue_test string_utf8_test
	rm -f Makefile
EOF

echo "Makefile has been created successfully."
echo "You can now run one of the following commands:"
echo "  make          - build the library and all non-excluded tests"
echo "  make library  - build only the library (libc99extend.a)"
echo "  make tests    - build tests (if not excluded)"
echo "  make run      - run the tests (if any built)"
echo "  make clean    - remove generated files (including the Makefile)"

exit 0
