#!/usr/bin/env sh
#
# by Vladislav Tislenko aka keklick1337 (2025)
# This script detects a suitable compiler (clang or gcc) and
# generates a Makefile for building:
#   - A single static library: libc99extend.a
#   - Tests: queue_test, string_utf8_test, thread_pool_test, test_main, containers_test
#     (unless excluded).
# in strict C99 mode with maximum warnings and pthread support (if needed).
#
# Usage:
#   ./configure [options]
#
# Options:
#   --exclude-tests <test1,test2,...>
#       Exclude specific tests from the build.
#
#   --help|-h
#       Show this help message and exit.
#
# Available tests for exclusion:
#   - queue_test
#   - string_utf8_test
#   - thread_pool_test
#   - test_main
#   - containers_test
#
# Example usage:
#   ./configure
#       -> Build the library and all tests.
#
#   ./configure --exclude-tests queue_test
#       -> Build the library and all tests except queue_test.
#
#   ./configure --exclude-tests queue_test,string_utf8_test
#       -> Build only the library (no tests).

echo "Running configure script..."

# ---------------------------------------------------------
# Parse command-line arguments
# ---------------------------------------------------------
EXCLUDE_TESTS_LIST=""

while [ $# -gt 0 ]; do
    case "$1" in
        --exclude-tests)
            EXCLUDE_TESTS_LIST="$2"
            shift 2
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo "  --exclude-tests <test1,test2,...>  Exclude specific tests from the build"
            echo "  --help                             Show this help and exit"
            echo ""
            echo "Available tests for exclusion: queue_test, string_utf8_test, thread_pool_test, test_main, containers_test"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Try '$0 --help' for more information."
            exit 1
            ;;
    esac
done

# ---------------------------------------------------------
# Detect compiler (clang or gcc)
# ---------------------------------------------------------
if command -v clang >/dev/null 2>&1; then
    CC=clang
    echo "Detected clang as compiler."
elif command -v gcc >/dev/null 2>&1; then
    CC=gcc
    echo "Detected gcc as compiler."
else
    echo "ERROR: No suitable C compiler found (clang or gcc)."
    exit 1
fi

# ---------------------------------------------------------
# Strict C99 with maximum warnings
# ---------------------------------------------------------
CFLAGS="-Wall -Wextra -Werror -pedantic -std=c99 -O2 -pthread"

# ---------------------------------------------------------
# We'll scan the ./c99extend folder for .c files
# and build them into one static library: libc99extend.a
# ---------------------------------------------------------
SRC_DIR="./c99extend"
LIB_NAME="libc99extend.a"

ALL_SOURCES=$(find "$SRC_DIR" -maxdepth 1 -type f -name "*.c" 2>/dev/null)
LIB_OBJECTS=""
for srcfile in $ALL_SOURCES; do
    objfile=$(basename "$srcfile" .c).o
    LIB_OBJECTS="$LIB_OBJECTS $objfile"
done

# ---------------------------------------------------------
# Define tests available
# ---------------------------------------------------------
ALL_TESTS="queue_test string_utf8_test thread_pool_test test_main containers_test"

# Convert comma-separated excludes into an array
IFS=',' read -r -a EXCLUDE_ARRAY <<< "$EXCLUDE_TESTS_LIST"

# We'll build only those tests that are not in the exclusion list
SHOULD_BUILD_TESTS=""
for T in $ALL_TESTS; do
    skip="false"
    for ex in "${EXCLUDE_ARRAY[@]}"; do
        if [ "$T" = "$ex" ]; then
            skip="true"
            break
        fi
    done
    if [ "$skip" = "false" ]; then
        SHOULD_BUILD_TESTS="$SHOULD_BUILD_TESTS $T"
    fi
done

# ---------------------------------------------------------
# Directories for tests
# ---------------------------------------------------------
TESTS_DIR="./tests"
TESTBIN_DIR="testbin"

# ---------------------------------------------------------
# Generate Makefile
# ---------------------------------------------------------
cat << EOF > Makefile
# ---------------------------------------------------------
# Makefile generated by the configure script
# by Vladislav Tislenko aka keklick1337 (2025)
#
# This Makefile builds:
#   - ${LIB_NAME} (from all .c in c99extend folder)
#   - Tests: queue_test, string_utf8_test, thread_pool_test, test_main, containers_test (unless excluded)
#   - Places test binaries in the folder: ${TESTBIN_DIR}
#
# You can exclude tests via --exclude-tests param.
# ---------------------------------------------------------

CC = $CC
CFLAGS = $CFLAGS

AR = ar
RANLIB = ranlib

LIB_NAME = ${LIB_NAME}
LIB_OBJECTS = ${LIB_OBJECTS}

TESTS = ${SHOULD_BUILD_TESTS}

SRC_DIR = ${SRC_DIR}
TESTS_DIR = ${TESTS_DIR}
TESTBIN_DIR = ${TESTBIN_DIR}

.PHONY: all library tests clean run

# 'all' builds the library and all non-excluded tests
all: library tests

# Build the static library
library: \$(LIB_NAME)

\$(LIB_NAME): \$(LIB_OBJECTS)
	\$(AR) rcs \$@ \$^
	\$(RANLIB) \$@

EOF

# Add compile rules for each .c in c99extend
for srcfile in $ALL_SOURCES; do
    base=$(basename "$srcfile" .c)
    cat << EOF >> Makefile
$base.o: \$(SRC_DIR)/$base.c
	\$(CC) \$(CFLAGS) -c \$(SRC_DIR)/$base.c -o $base.o

EOF
done

cat << 'EOF' >> Makefile
$(TESTBIN_DIR):
	mkdir -p $(TESTBIN_DIR)
EOF

# Append commands for each test we want to build
for T in $SHOULD_BUILD_TESTS; do
    cat << EOF >> Makefile
ifneq (\$(strip \$(TESTS)),)
\$(TESTBIN_DIR)/$T: \$(TESTS_DIR)/$T.c \$(LIB_NAME) | \$(TESTBIN_DIR)
	\$(CC) \$(CFLAGS) -I\$(SRC_DIR) \$(TESTS_DIR)/$T.c \$(LIB_NAME) -o \$(TESTBIN_DIR)/$T
tests: \$(TESTBIN_DIR)/$T
endif

EOF
done

cat << 'EOF' >> Makefile

run:
ifneq ($(strip $(TESTS)),)
	@echo "Running tests..."
	@if [ -f $(TESTBIN_DIR)/queue_test ]; then ./$(TESTBIN_DIR)/queue_test; else echo "$(TESTBIN_DIR)/queue_test not built or excluded."; fi
	@echo
	@if [ -f $(TESTBIN_DIR)/string_utf8_test ]; then ./$(TESTBIN_DIR)/string_utf8_test; else echo "$(TESTBIN_DIR)/string_utf8_test not built or excluded."; fi
	@echo
	@if [ -f $(TESTBIN_DIR)/thread_pool_test ]; then ./$(TESTBIN_DIR)/thread_pool_test; else echo "$(TESTBIN_DIR)/thread_pool_test not built or excluded."; fi
	@echo
	@if [ -f $(TESTBIN_DIR)/test_main ]; then ./$(TESTBIN_DIR)/test_main; else echo "$(TESTBIN_DIR)/test_main not built or excluded."; fi
	@echo
	@if [ -f $(TESTBIN_DIR)/containers_test ]; then ./$(TESTBIN_DIR)/containers_test; else echo "$(TESTBIN_DIR)/containers_test not built or excluded."; fi

else
	@echo "No tests to run (all tests are excluded)."
endif

clean:
	rm -f *.o *.a
	rm -rf $(TESTBIN_DIR)
	rm -f Makefile
EOF

echo "Makefile has been created successfully."
echo "You can now run one of the following commands:"
echo "  make          - build the library and all non-excluded tests"
echo "  make library  - build only the library (${LIB_NAME})"
echo "  make tests    - build tests (if not excluded)"
echo "  make run      - run the tests (if any built)"
echo "  make clean    - remove generated files (including the Makefile)"

exit 0
